(* A list of uppercase and lowercase letters. *)
letter = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M"
	   | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
	   | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m"
	   | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z";

(* Rules for all numbers. *)
sign = ["+" | "-"];

(* Rules for binary numbers. *)
binary_digit = "0" | "1";
binary_prefix = "0b";
binary_number = sign, binary_prefix, binary_digit, {binary_digit};

(* Rules for octal numbers. *)
octal_digit = binary_digit | "2" | "3" | "4" | "5" | "6" | "7";
octal_prefix = "0o";
octal_number = sign, octal_prefix, octal_digit, {octal_digit};

(* Rules for decimal numbers. *)
decimal_digit = octal_digit | "8" | "9";
decimal_number = sign, decimal_digit, {decimal_digit};

(* Rules for hexidecimal numbers. *)
hex_digit = decimal_digit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f";
hex_prefix = "0x";
hex_number = sign, hex_prefix, hex_digit, {hex_digit};

(* Rules for string literal characters. *)
string_chars_double_quote = ? Any character except single quote ?;
string_chars_single_quote = ? Any character except double quote ?;

(* Rules defining basic type literals. *)
int_literal = binary_number | octal_number | decimal_number | hex_number;
real_literal = decimal_number, ".", decimal_number;
bool_literal = "true" | "false";
string_literal = ("'", { string_chars_single_quote }, "'") | ('"', { string_chars_double_quote }, '"');
literal_value = int_literal | real_literal | bool_literal | string_literal;

(* Rules for variable names *)
var_name = letter, { letter | number | "_"};
var_or_literal = var_name | literal_value;
var_or_int = var_name | int_literal;

(* Rules for statements *)
statement_block = "{", {statement} "}";
statement = (function_statement), ";";

(* Rules for Expressions *)
expression = "TODO";

function_statement = var_name, "(", [var_or_literal, {",", var_or_literal}], ")";

(* Rules for Flow Control *)
if_statement = "if", "(", expression, ")", statement_block, [else, statement_block];
for_statement = "for", "(", [var_name, "="], var_or_int, ("to" | "downto"), var_or_int, ["step", var_or_int], ")", statement_block;
while_statement = "while", "(", expression, ")", statement_block;

(* Rules for function declarations *)
parameter_list = [parameter, {",", parameter}, {"," default_parameter}] | [default_parameter, {",", default_parameter}];
parameter = data_type, var_name;
default_parameter = parameter, "=", literal_value;
function_def = "function", var_name, "(", parameter_list, ")", statement_block;

