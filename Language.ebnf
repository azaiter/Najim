(* A list of uppercase and lowercase letters. *)
letter = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M"
	   | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
	   | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m"
	   | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z";

(* Rules for all numbers. *)
number_prefix = ["+" | "-"];

(* Rules for binary numbers. *)
binary_digit = "0" | "1";
binary_prefix = "0b";
binary_number = number_prefix, binary_prefix, binary_digit, {binary_digit};

(* Rules for octal numbers. *)
octal_digit = binary_digit | "2" | "3" | "4" | "5" | "6" | "7";
octal_prefix = "0o";
octal_number = number_prefix, octal_prefix, octal_digit, {octal_digit};

(* Rules for decimal numbers. *)
decimal_digit = octal_digit | "8" | "9";
decimal_number = number_prefix, decimal_digit, {decimal_digit};

(* Rules for hexidecimal numbers. *)
hex_digit = decimal_digit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f";
hex_prefix = "0x";
hex_number = number_prefix, hex_prefix, hex_digit, {hex_digit};

(* Rules for string literal characters. *)
string_single_quote_chars = ? Any character except single quote ?;
string_double_quote_chars = ? Any character except double quote ?;

(* Rules defining basic type literals. *)
int_literal = binary_number | octal_number | decimal_number | hex_number;
real_literal = decimal_number, ".", decimal_number;
bool_literal = "true" | "false";
string_literal = "'", { string_single_quote_chars }, "'" | '"', { string_double_quote_chars }, '"';




(* STUFF FROM HERE ON OUT STILL NEEDS TO BE IMPLEMENTED!
<type> ->
	int | real | string | bool
<value> ->
	<int> | <real> | <string> | <bool>
<var_name> -> <var_start_char>{<var_char>}
<var_start_char> -> a | ... | z | A | ... | Z
<var_char> -> <var_start_char> | <digit> | _

<statement_list> -> {<statement>;}
<statement> -> {

===== VARIABLE DECLARATION =====
<var_declare> -> [const] <type> <var_name> = <value>;

===== SIMPLE ASSIGNMENT =====
<assignment> -> <var_name> = <expr>;

===== EXPRESSION =====
<expr_1> -> [<expr_1> (+ | -)] <expr_2>
<expr_2> -> [<expr_2> (* | / | %)] <expr_3>
<expr_3> -> [<expr_3> **] <expr_4>
<expr_4> -> (<expr_1>) | <var_name> | <number> | <string> | <bool>

===== INPUT/OUTPUT =====
<input> -> input(<type>);
<output> -> output(<value>);

===== IF-ELSE =====
<if_else> -> if(<condition>) { <statement_list> } [else { <statement_list> }] *)
